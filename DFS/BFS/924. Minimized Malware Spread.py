from typing import List 
from collections import deque, defaultdict

class Solution:
    def _check(self, idx, vis): # 正难则反：咱不看移除 x 后，多少会死(模拟所有)，然后拿数字小的；
        if idx in vis: return 0  # 我们看移除 x 后，会救多少人(模拟x连痛快，小)，然后拿数字大的
        return 1
    
    def _bfs(self, s, graph, initial):
        q = [s]; vis = set(); cnt = 0 
        while q:
            cnt += 1
            now = q.pop(0)
            vis.add(now)
            for nxt, x in enumerate(graph[now]):
                if x and self._check(nxt, vis):
                    if nxt in initial: return 0
                   
                    q.append(nxt)
                    vis.add(nxt)
        return cnt
    
    def minMalwareSpread(self, graph, initial):
        a = {x: self._bfs(x, graph, initial) for x in initial}
        mx = max(a.values())
        ans = min((x if a[x] == mx else float('inf') for x in initial))
        return ans

def main(): 
    solution = Solution() 
    graph = [[1,1,0],[1,1,0],[0,0,1]]
    initial = [0,1,2]


    #  0 -> 1
    #  2
   
    out = solution.minMalwareSpread(graph, initial) 
    print(out) 

if __name__ == "__main__":#
    main()