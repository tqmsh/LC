class Solution:
    def minCost(self, n, cuts): 
        cuts = [0] + sorted(cuts) + [n]  # Add endpoints and sort 
        dp = [[0] * len(cuts)  for _ in range(len(cuts))]  
         
        # 离散化，枚举有效点  
        for l in range(3, len(cuts) + 1):  
            for i in range(len(cuts) - l + 1):
                # [i, j] = l, j - i + 1 = l, j = l + i - 1
                j = i + l - 1 # j < len(cnt), i + l - 1 < len(cnt), i < len(cnt) - l + 1
                # (i, j)
               
                dp[i][j] = float('inf') # 初始化，>= 3 的全 inf, [1, 2] 全 0
                for k in range(i + 1, j): 
                    # cut [i, j] at k
                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + cuts[j] - cuts[i])    
        return dp[0][len(cuts) - 1] 


print(Solution().minCost(9, [5,6,1,4,2]))