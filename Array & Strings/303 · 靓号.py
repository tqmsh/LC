from typing import List
from collections import Counter
class Solution:
    def get_minium_number(self, number: List[int], k: int) -> str:
        cnt = Counter(number); mn = float('inf'); best_nums = []
        # 贪心, 拿最优靓号
        for i in range(10): 
            req =  k - cnt[i]
            if req <= 0: return "".join(map(str, number))
            cost = 0
            for j in range(1, 10): # 从小到大枚举花费金额, 能用则用
                for num in [i + j, i - j]:
                    if num in range(0, 10):
                        amt = min(req, cnt[num])
                        cost += amt * j; req -= amt
                    if not req: break
            # 每一个靓号必然成，就是话费多少
            if cost < mn: mn = cost; best_nums = [i]
            elif cost == mn: best_nums.append(i)
        # 枚举最优靓号，模拟 & 打擂台
        ans = '9' * len(number)
        for i in best_nums:   
            now = number.copy() # 🟥初始化别玩了 mutability
            req = k - cnt[i]
            for j in range(1, 10):
                if i + j <= 9:
                    num = i + j
                    for x in range(len(now)): # 从左往右枚举, 能用则用
                        if now[x] == num:
                            now[x] = i
                            req -= 1
                            if not req: break
                if not req: break
                if i - j >= 0:
                    num = i - j
                    for x in range(len(now) - 1, -1, -1): # 🟥名字写错了，因该是 k 的，写成了 j
                        if now[x] == num:
                            now[x] = i
                            req -= 1
                            if not req: break
            ans = min(ans, "".join(map(str, now)))
        return ans
tmp = Solution().get_minium_number([0,8,1,0,7,6,1,0,2,4,8,8,1,1,3,5,8,3,6,8,6,4,0,5,5,2,1,1,3,2,8,4,4,8,4,3,4,4,6,2,6,6,6,7,9,0,1,5,7,9,3,3,8,7,3,9,8,9,3,5,1,8,7,4,1,8,7,4,8,5,7,9,7,7,4,8,3,8,8,4,0,7,8,5,5,0,1,9,1,2,6,8,2,0,9,1,5,4,0,0,6,5,8,2,5,1,5,2,1,7,9,8,5,5,9,3,3,0,4,3,7,4,4,1,2,4,2,8,3,8,1,3,3,6,7,8,3,7,9,1,2,9,8,3,3,9,8,2,2,2,0,2,0,3,7,1,7,0,2,5,5,4,1,4,4,6,0,4,2,7,8,0,9,2,9,2,7,7,2,4,2,1,1,5,5,6,7,9,9,8,4,0,0,8,1,8,5,1,5,7,6,8,1,8,5,1,5,3,9,9,4,0,9,6,2,1,6,5,5,8,2,2,8,9,7,2,1,0,0,1,6,4,9,4,3,0,1,6,4,3,3,3,4,6,1,7,8,9,2,6,4,8,0,5,0,2,0,0,1,3,0,7,5,9,0,4,6,3,7,4,7,9,9,9,4,8,8,7,5,6,0,3,4,0,0,5,7,0,0,1,5,7,4,9,7,5,0,6,4,0,5,9,6,0,2,6,3,9,1,6,9,5,8,6,3,5,3,6,1,1,1,9,2,7,2,4,3,5,2,2,5,8,2,4,9,7,4,2,7,0,9,2,4,3,1,1,8,6,2,0,3,0,0,3,6,9,3,7,6,2,7,3,7,7,9,1,7,7,1,4,2,1,9,1,8,3,3,0,7,6,9,5,1,6,2,0,9,2,6,4,2,7,7,3,0,0,8,2,6,1,4,3,7,4,3,9,6,9,3,7,0,6,8,3,7,1,5,6,0,8,7,3,3,7,0,7,2,5,2,8,1,4,8,7,0,0,5,4,3,2,4,1,6,7,6,0,4,5,8,9,6,4,7,7,4,5,1,3,3,8,0,2,0,5,1,0,6,5,2,2,1,5,7,2,3,8,0,8,8,4,2,0,9,9,9,5,2,9,7,0,3,0,2,4,1,8,6,7,7,6,5,1,4,7,2,4,3,6,5,5,5,6,3,2,1,9,1,1,0,2,6,6,8,6,0,7,1,8,5,9,1,1,6,8,3,7,5,7,3,3,4,2,8,0,8,9,9,1,0,2,3,4,7,5,3,9,5,5,8,6,7,8,5,6,2,7,0,2,4,9,6,0,5,3,4,0,0,6,5,9,9,2,8,8,1,8,5,8,0,2,0,7,7,1,9,5,8,6,1,3], 596)
print(tmp.count('4'))